<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/"><channel><title>nix on sekun's blog</title><link>https://blog.sekun.dev/tags/nix/</link><description>Recent content in nix on sekun's blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Thu, 27 Oct 2022 12:31:00 +0000</lastBuildDate><atom:link href="https://blog.sekun.dev/tags/nix/index.xml" rel="self" type="application/rss+xml"/><item><title>Manage Secrets in NixOS</title><link>https://blog.sekun.dev/posts/manage-secrets-in-nixos/</link><pubDate>Thu, 27 Oct 2022 12:31:00 +0000</pubDate><guid>https://blog.sekun.dev/posts/manage-secrets-in-nixos/</guid><description>Recently, I experimented with running NixOS on a DigitalOcean droplet (which I will probably write about in the future), and migrated some of my toy projects from App Platform. During the migration process, I realized that I would have to somehow handle the DB certificate, and other sensitive credentials. I can&amp;rsquo;t just hardcode these!
One of the more popular projects for problems like this is agenix. Their README for how to use it was a bit confusing (for me) so hopefully this post will be of use to others.</description></item><item><title>Create Rust binaries, and Docker images with Nix</title><link>https://blog.sekun.dev/posts/create-rust-binaries-and-docker-images-with-nix/</link><pubDate>Mon, 11 Apr 2022 06:20:00 +0000</pubDate><guid>https://blog.sekun.dev/posts/create-rust-binaries-and-docker-images-with-nix/</guid><description>Introduction A few days ago, I released the abomination of a project called emojied (website, repo) to the world. It went great, I&amp;rsquo;m glad people found it funny. However, I&amp;rsquo;m not too pleased with the deployment process: from building the project to shipping it. I made heavy use of Docker to build the necessary static assets, and binary.
Here&amp;rsquo;s the current setup:
Dev environment PostgreSQL (handled by NixOS) rustc, openssl, cargo, etc.</description></item><item><title>What I learned from building an emoji URL shortener in Rust</title><link>https://blog.sekun.dev/posts/what-i-learned-from-building-a-rust-emoji-url-shortener/</link><pubDate>Mon, 11 Apr 2022 06:20:00 +0000</pubDate><guid>https://blog.sekun.dev/posts/what-i-learned-from-building-a-rust-emoji-url-shortener/</guid><description>So, I made an emoji URL shortener with Rust and shared it in some places including the Rust community. And oh man this is the first thing I made that got this many visitors which is pretty nice knowing that people were curious enough to try it despite them probably feeling disgusted from me bringing such a thing to existence.
Repo: https://github.com/sekunho/emojied Website: https://emojied.net Some glowing âœ¨ reviews:</description></item><item><title>Packaging Pre-built Binaries with Nix Flake</title><link>https://blog.sekun.dev/posts/packaging-prebuilt-binaries-with-nix/</link><pubDate>Sun, 06 Mar 2022 04:11:00 +0000</pubDate><guid>https://blog.sekun.dev/posts/packaging-prebuilt-binaries-with-nix/</guid><description>Here&amp;rsquo;s the scenario: You have a nix environment all set up with all the dependencies you need for working on your next awesome project. All but one. nixpkgs doesn&amp;rsquo;t have the version you want. Fortunately, there&amp;rsquo;s a static binary file on their GitHub page. So should you just manually download it every time you set your project up, or should you write a Nix package that builds it from source?</description></item></channel></rss>